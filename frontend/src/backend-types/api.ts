/* tslint:disable */
/* eslint-disable */
/**
 * Movie App
 * Test description
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'movies'?: string;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    'category_type': number;
}
/**
 * 
 * @export
 * @interface Movie
 */
export interface Movie {
    /**
     * 
     * @type {string}
     * @memberof Movie
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof Movie
     */
    'average_rating'?: number;
    /**
     * 
     * @type {string}
     * @memberof Movie
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Movie
     */
    'created_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Movie
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Movie
     */
    'rated'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Movie
     */
    'released'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Movie
     */
    'runtime'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Movie
     */
    'plot'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Movie
     */
    'poster'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Movie
     */
    'imdbrating'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Movie
     */
    'imdbvotes'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Movie
     */
    'imdbid'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Movie
     */
    'boxoffice'?: number | null;
    /**
     * 
     * @type {Set<string>}
     * @memberof Movie
     */
    'genres'?: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof Movie
     */
    'awards'?: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof Movie
     */
    'countries'?: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof Movie
     */
    'languages'?: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof Movie
     */
    'actors'?: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof Movie
     */
    'directors'?: Set<string>;
    /**
     * 
     * @type {Set<string>}
     * @memberof Movie
     */
    'writers'?: Set<string>;
}
/**
 * 
 * @export
 * @interface MovieList
 */
export interface MovieList {
    /**
     * 
     * @type {string}
     * @memberof MovieList
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieList
     */
    'reviews'?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieList
     */
    'genre_data'?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieList
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieList
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieList
     */
    'updated_at'?: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof MovieList
     */
    'owners': Set<string>;
}
/**
 * 
 * @export
 * @interface MovieReviewCreate
 */
export interface MovieReviewCreate {
    /**
     * 
     * @type {string}
     * @memberof MovieReviewCreate
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieReviewCreate
     */
    'movie': string;
    /**
     * 
     * @type {string}
     * @memberof MovieReviewCreate
     */
    'review_text'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MovieReviewCreate
     */
    'rating'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof MovieReviewCreate
     */
    'is_favorite'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MovieReviewCreate
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieReviewCreate
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieReviewCreate
     */
    'movie_list': string;
}
/**
 * 
 * @export
 * @interface MovieReviewDetail
 */
export interface MovieReviewDetail {
    /**
     * 
     * @type {string}
     * @memberof MovieReviewDetail
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieReviewDetail
     */
    'movie'?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieReviewDetail
     */
    'review_text'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MovieReviewDetail
     */
    'rating'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof MovieReviewDetail
     */
    'is_favorite'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MovieReviewDetail
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieReviewDetail
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieReviewDetail
     */
    'movie_list': string;
}
/**
 * 
 * @export
 * @interface MoviesAwardsList200Response
 */
export interface MoviesAwardsList200Response {
    /**
     * 
     * @type {number}
     * @memberof MoviesAwardsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof MoviesAwardsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MoviesAwardsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Category>}
     * @memberof MoviesAwardsList200Response
     */
    'results': Array<Category>;
}
/**
 * 
 * @export
 * @interface MoviesMoviesList200Response
 */
export interface MoviesMoviesList200Response {
    /**
     * 
     * @type {number}
     * @memberof MoviesMoviesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof MoviesMoviesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MoviesMoviesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Movie>}
     * @memberof MoviesMoviesList200Response
     */
    'results': Array<Movie>;
}
/**
 * 
 * @export
 * @interface MoviesPersonsList200Response
 */
export interface MoviesPersonsList200Response {
    /**
     * 
     * @type {number}
     * @memberof MoviesPersonsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof MoviesPersonsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MoviesPersonsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Person>}
     * @memberof MoviesPersonsList200Response
     */
    'results': Array<Person>;
}
/**
 * 
 * @export
 * @interface Person
 */
export interface Person {
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'acted_movies'?: string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'written_movies'?: string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'directed_movies'?: string;
}
/**
 * 
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    'movie_lists'?: string;
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    'genre_data'?: string;
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    'bio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    'profile_picture'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    'user': string;
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    'my_movie_list'?: string | null;
}
/**
 * 
 * @export
 * @interface ReviewsMovielistList200Response
 */
export interface ReviewsMovielistList200Response {
    /**
     * 
     * @type {number}
     * @memberof ReviewsMovielistList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof ReviewsMovielistList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReviewsMovielistList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<MovieList>}
     * @memberof ReviewsMovielistList200Response
     */
    'results': Array<MovieList>;
}
/**
 * 
 * @export
 * @interface ReviewsMoviereviewsList200Response
 */
export interface ReviewsMoviereviewsList200Response {
    /**
     * 
     * @type {number}
     * @memberof ReviewsMoviereviewsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof ReviewsMoviereviewsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReviewsMoviereviewsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<MovieReviewDetail>}
     * @memberof ReviewsMoviereviewsList200Response
     */
    'results': Array<MovieReviewDetail>;
}

/**
 * MembersApi - axios parameter creator
 * @export
 */
export const MembersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersLoginCreate: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/members/login/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersLogoutCreate: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/members/logout/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersRegisterCreate: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/members/register/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MembersApi - functional programming interface
 * @export
 */
export const MembersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MembersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async membersLoginCreate(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.membersLoginCreate(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MembersApi.membersLoginCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async membersLogoutCreate(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.membersLogoutCreate(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MembersApi.membersLogoutCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async membersRegisterCreate(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.membersRegisterCreate(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MembersApi.membersRegisterCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * MembersApi - factory interface
 * @export
 */
export const MembersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MembersApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersLoginCreate(options?: any): AxiosPromise<void> {
            return localVarFp.membersLoginCreate(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersLogoutCreate(options?: any): AxiosPromise<void> {
            return localVarFp.membersLogoutCreate(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersRegisterCreate(options?: any): AxiosPromise<void> {
            return localVarFp.membersRegisterCreate(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MembersApi - object-oriented interface
 * @export
 * @class MembersApi
 * @extends {BaseAPI}
 */
export class MembersApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public membersLoginCreate(options?: RawAxiosRequestConfig) {
        return MembersApiFp(this.configuration).membersLoginCreate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public membersLogoutCreate(options?: RawAxiosRequestConfig) {
        return MembersApiFp(this.configuration).membersLogoutCreate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public membersRegisterCreate(options?: RawAxiosRequestConfig) {
        return MembersApiFp(this.configuration).membersRegisterCreate(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MoviesApi - axios parameter creator
 * @export
 */
export const MoviesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Category} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesAwardsCreate: async (data: Category, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('moviesAwardsCreate', 'data', data)
            const localVarPath = `/movies/awards/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesAwardsList: async (page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/movies/awards/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name A unique value identifying this category.
         * @param {Category} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesCategoriesCreate: async (name: string, data: Category, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('moviesCategoriesCreate', 'name', name)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('moviesCategoriesCreate', 'data', data)
            const localVarPath = `/movies/categories/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name A unique value identifying this category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesCategoriesRead: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('moviesCategoriesRead', 'name', name)
            const localVarPath = `/movies/categories/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Category} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesCountriesCreate: async (data: Category, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('moviesCountriesCreate', 'data', data)
            const localVarPath = `/movies/countries/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesCountriesList: async (page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/movies/countries/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Category} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesGenresCreate: async (data: Category, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('moviesGenresCreate', 'data', data)
            const localVarPath = `/movies/genres/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesGenresList: async (page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/movies/genres/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Category} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesLanguagesCreate: async (data: Category, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('moviesLanguagesCreate', 'data', data)
            const localVarPath = `/movies/languages/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesLanguagesList: async (page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/movies/languages/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Movie} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesMoviesCreate: async (data: Movie, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('moviesMoviesCreate', 'data', data)
            const localVarPath = `/movies/movies/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} identifier 
         * @param {Movie} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesMoviesCreate_1: async (identifier: string, data: Movie, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            assertParamExists('moviesMoviesCreate_1', 'identifier', identifier)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('moviesMoviesCreate_1', 'data', data)
            const localVarPath = `/movies/movies/{identifier}/`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesMoviesList: async (page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/movies/movies/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesMoviesRead: async (identifier: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifier' is not null or undefined
            assertParamExists('moviesMoviesRead', 'identifier', identifier)
            const localVarPath = `/movies/movies/{identifier}/`
                .replace(`{${"identifier"}}`, encodeURIComponent(String(identifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Person} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesPersonsCreate: async (data: Person, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('moviesPersonsCreate', 'data', data)
            const localVarPath = `/movies/persons/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name A unique value identifying this person.
         * @param {Person} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesPersonsCreate_2: async (name: string, data: Person, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('moviesPersonsCreate_2', 'name', name)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('moviesPersonsCreate_2', 'data', data)
            const localVarPath = `/movies/persons/{name}/`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesPersonsList: async (page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/movies/persons/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name A unique value identifying this person.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesPersonsRead: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('moviesPersonsRead', 'name', name)
            const localVarPath = `/movies/persons/{name}/`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MoviesApi - functional programming interface
 * @export
 */
export const MoviesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MoviesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Category} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moviesAwardsCreate(data: Category, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moviesAwardsCreate(data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MoviesApi.moviesAwardsCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moviesAwardsList(page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MoviesAwardsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moviesAwardsList(page, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MoviesApi.moviesAwardsList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} name A unique value identifying this category.
         * @param {Category} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moviesCategoriesCreate(name: string, data: Category, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moviesCategoriesCreate(name, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MoviesApi.moviesCategoriesCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} name A unique value identifying this category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moviesCategoriesRead(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moviesCategoriesRead(name, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MoviesApi.moviesCategoriesRead']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {Category} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moviesCountriesCreate(data: Category, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moviesCountriesCreate(data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MoviesApi.moviesCountriesCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moviesCountriesList(page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MoviesAwardsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moviesCountriesList(page, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MoviesApi.moviesCountriesList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {Category} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moviesGenresCreate(data: Category, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moviesGenresCreate(data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MoviesApi.moviesGenresCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moviesGenresList(page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MoviesAwardsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moviesGenresList(page, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MoviesApi.moviesGenresList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {Category} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moviesLanguagesCreate(data: Category, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moviesLanguagesCreate(data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MoviesApi.moviesLanguagesCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moviesLanguagesList(page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MoviesAwardsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moviesLanguagesList(page, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MoviesApi.moviesLanguagesList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {Movie} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moviesMoviesCreate(data: Movie, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Movie>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moviesMoviesCreate(data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MoviesApi.moviesMoviesCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} identifier 
         * @param {Movie} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moviesMoviesCreate_1(identifier: string, data: Movie, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Movie>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moviesMoviesCreate_1(identifier, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MoviesApi.moviesMoviesCreate_1']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moviesMoviesList(page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MoviesMoviesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moviesMoviesList(page, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MoviesApi.moviesMoviesList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moviesMoviesRead(identifier: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Movie>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moviesMoviesRead(identifier, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MoviesApi.moviesMoviesRead']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {Person} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moviesPersonsCreate(data: Person, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moviesPersonsCreate(data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MoviesApi.moviesPersonsCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} name A unique value identifying this person.
         * @param {Person} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moviesPersonsCreate_2(name: string, data: Person, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moviesPersonsCreate_2(name, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MoviesApi.moviesPersonsCreate_2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moviesPersonsList(page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MoviesPersonsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moviesPersonsList(page, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MoviesApi.moviesPersonsList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} name A unique value identifying this person.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moviesPersonsRead(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moviesPersonsRead(name, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MoviesApi.moviesPersonsRead']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * MoviesApi - factory interface
 * @export
 */
export const MoviesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MoviesApiFp(configuration)
    return {
        /**
         * 
         * @param {Category} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesAwardsCreate(data: Category, options?: any): AxiosPromise<Category> {
            return localVarFp.moviesAwardsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesAwardsList(page?: number, options?: any): AxiosPromise<MoviesAwardsList200Response> {
            return localVarFp.moviesAwardsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} name A unique value identifying this category.
         * @param {Category} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesCategoriesCreate(name: string, data: Category, options?: any): AxiosPromise<Category> {
            return localVarFp.moviesCategoriesCreate(name, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} name A unique value identifying this category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesCategoriesRead(name: string, options?: any): AxiosPromise<Category> {
            return localVarFp.moviesCategoriesRead(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Category} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesCountriesCreate(data: Category, options?: any): AxiosPromise<Category> {
            return localVarFp.moviesCountriesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesCountriesList(page?: number, options?: any): AxiosPromise<MoviesAwardsList200Response> {
            return localVarFp.moviesCountriesList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Category} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesGenresCreate(data: Category, options?: any): AxiosPromise<Category> {
            return localVarFp.moviesGenresCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesGenresList(page?: number, options?: any): AxiosPromise<MoviesAwardsList200Response> {
            return localVarFp.moviesGenresList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Category} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesLanguagesCreate(data: Category, options?: any): AxiosPromise<Category> {
            return localVarFp.moviesLanguagesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesLanguagesList(page?: number, options?: any): AxiosPromise<MoviesAwardsList200Response> {
            return localVarFp.moviesLanguagesList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Movie} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesMoviesCreate(data: Movie, options?: any): AxiosPromise<Movie> {
            return localVarFp.moviesMoviesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} identifier 
         * @param {Movie} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesMoviesCreate_1(identifier: string, data: Movie, options?: any): AxiosPromise<Movie> {
            return localVarFp.moviesMoviesCreate_1(identifier, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesMoviesList(page?: number, options?: any): AxiosPromise<MoviesMoviesList200Response> {
            return localVarFp.moviesMoviesList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} identifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesMoviesRead(identifier: string, options?: any): AxiosPromise<Movie> {
            return localVarFp.moviesMoviesRead(identifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Person} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesPersonsCreate(data: Person, options?: any): AxiosPromise<Person> {
            return localVarFp.moviesPersonsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} name A unique value identifying this person.
         * @param {Person} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesPersonsCreate_2(name: string, data: Person, options?: any): AxiosPromise<Person> {
            return localVarFp.moviesPersonsCreate_2(name, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesPersonsList(page?: number, options?: any): AxiosPromise<MoviesPersonsList200Response> {
            return localVarFp.moviesPersonsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} name A unique value identifying this person.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moviesPersonsRead(name: string, options?: any): AxiosPromise<Person> {
            return localVarFp.moviesPersonsRead(name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MoviesApi - object-oriented interface
 * @export
 * @class MoviesApi
 * @extends {BaseAPI}
 */
export class MoviesApi extends BaseAPI {
    /**
     * 
     * @param {Category} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public moviesAwardsCreate(data: Category, options?: RawAxiosRequestConfig) {
        return MoviesApiFp(this.configuration).moviesAwardsCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public moviesAwardsList(page?: number, options?: RawAxiosRequestConfig) {
        return MoviesApiFp(this.configuration).moviesAwardsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} name A unique value identifying this category.
     * @param {Category} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public moviesCategoriesCreate(name: string, data: Category, options?: RawAxiosRequestConfig) {
        return MoviesApiFp(this.configuration).moviesCategoriesCreate(name, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} name A unique value identifying this category.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public moviesCategoriesRead(name: string, options?: RawAxiosRequestConfig) {
        return MoviesApiFp(this.configuration).moviesCategoriesRead(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Category} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public moviesCountriesCreate(data: Category, options?: RawAxiosRequestConfig) {
        return MoviesApiFp(this.configuration).moviesCountriesCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public moviesCountriesList(page?: number, options?: RawAxiosRequestConfig) {
        return MoviesApiFp(this.configuration).moviesCountriesList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Category} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public moviesGenresCreate(data: Category, options?: RawAxiosRequestConfig) {
        return MoviesApiFp(this.configuration).moviesGenresCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public moviesGenresList(page?: number, options?: RawAxiosRequestConfig) {
        return MoviesApiFp(this.configuration).moviesGenresList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Category} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public moviesLanguagesCreate(data: Category, options?: RawAxiosRequestConfig) {
        return MoviesApiFp(this.configuration).moviesLanguagesCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public moviesLanguagesList(page?: number, options?: RawAxiosRequestConfig) {
        return MoviesApiFp(this.configuration).moviesLanguagesList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Movie} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public moviesMoviesCreate(data: Movie, options?: RawAxiosRequestConfig) {
        return MoviesApiFp(this.configuration).moviesMoviesCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} identifier 
     * @param {Movie} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public moviesMoviesCreate_1(identifier: string, data: Movie, options?: RawAxiosRequestConfig) {
        return MoviesApiFp(this.configuration).moviesMoviesCreate_1(identifier, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public moviesMoviesList(page?: number, options?: RawAxiosRequestConfig) {
        return MoviesApiFp(this.configuration).moviesMoviesList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public moviesMoviesRead(identifier: string, options?: RawAxiosRequestConfig) {
        return MoviesApiFp(this.configuration).moviesMoviesRead(identifier, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Person} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public moviesPersonsCreate(data: Person, options?: RawAxiosRequestConfig) {
        return MoviesApiFp(this.configuration).moviesPersonsCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} name A unique value identifying this person.
     * @param {Person} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public moviesPersonsCreate_2(name: string, data: Person, options?: RawAxiosRequestConfig) {
        return MoviesApiFp(this.configuration).moviesPersonsCreate_2(name, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public moviesPersonsList(page?: number, options?: RawAxiosRequestConfig) {
        return MoviesApiFp(this.configuration).moviesPersonsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} name A unique value identifying this person.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public moviesPersonsRead(name: string, options?: RawAxiosRequestConfig) {
        return MoviesApiFp(this.configuration).moviesPersonsRead(name, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProfilesApi - axios parameter creator
 * @export
 */
export const ProfilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Profile} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesProfilePartialUpdate: async (data: Profile, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('profilesProfilePartialUpdate', 'data', data)
            const localVarPath = `/profiles/profile/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesProfileRead: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profiles/profile/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Profile} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesProfileUpdate: async (data: Profile, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('profilesProfileUpdate', 'data', data)
            const localVarPath = `/profiles/profile/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfilesApi - functional programming interface
 * @export
 */
export const ProfilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfilesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Profile} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profilesProfilePartialUpdate(data: Profile, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profilesProfilePartialUpdate(data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.profilesProfilePartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profilesProfileRead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profilesProfileRead(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.profilesProfileRead']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {Profile} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profilesProfileUpdate(data: Profile, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profilesProfileUpdate(data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProfilesApi.profilesProfileUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ProfilesApi - factory interface
 * @export
 */
export const ProfilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfilesApiFp(configuration)
    return {
        /**
         * 
         * @param {Profile} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesProfilePartialUpdate(data: Profile, options?: any): AxiosPromise<Profile> {
            return localVarFp.profilesProfilePartialUpdate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesProfileRead(options?: any): AxiosPromise<Profile> {
            return localVarFp.profilesProfileRead(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Profile} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesProfileUpdate(data: Profile, options?: any): AxiosPromise<Profile> {
            return localVarFp.profilesProfileUpdate(data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfilesApi - object-oriented interface
 * @export
 * @class ProfilesApi
 * @extends {BaseAPI}
 */
export class ProfilesApi extends BaseAPI {
    /**
     * 
     * @param {Profile} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public profilesProfilePartialUpdate(data: Profile, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).profilesProfilePartialUpdate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public profilesProfileRead(options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).profilesProfileRead(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Profile} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public profilesProfileUpdate(data: Profile, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).profilesProfileUpdate(data, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ReviewsApi - axios parameter creator
 * @export
 */
export const ReviewsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {MovieList} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsMovielistCreate: async (data: MovieList, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('reviewsMovielistCreate', 'data', data)
            const localVarPath = `/reviews/movielist/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A UUID string identifying this movie list.
         * @param {MovieList} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsMovielistCreate_1: async (id: string, data: MovieList, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reviewsMovielistCreate_1', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('reviewsMovielistCreate_1', 'data', data)
            const localVarPath = `/reviews/movielist/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsMovielistList: async (page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reviews/movielist/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A UUID string identifying this movie list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsMovielistRead: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reviewsMovielistRead', 'id', id)
            const localVarPath = `/reviews/movielist/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MovieReviewCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsMoviereviewsCreate: async (data: MovieReviewCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('reviewsMoviereviewsCreate', 'data', data)
            const localVarPath = `/reviews/moviereviews/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A UUID string identifying this movie review.
         * @param {MovieReviewCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsMoviereviewsCreate_2: async (id: string, data: MovieReviewCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reviewsMoviereviewsCreate_2', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('reviewsMoviereviewsCreate_2', 'data', data)
            const localVarPath = `/reviews/moviereviews/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A UUID string identifying this movie review.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsMoviereviewsDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reviewsMoviereviewsDelete', 'id', id)
            const localVarPath = `/reviews/moviereviews/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsMoviereviewsList: async (page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reviews/moviereviews/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id A UUID string identifying this movie review.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsMoviereviewsRead: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('reviewsMoviereviewsRead', 'id', id)
            const localVarPath = `/reviews/moviereviews/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReviewsApi - functional programming interface
 * @export
 */
export const ReviewsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReviewsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {MovieList} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reviewsMovielistCreate(data: MovieList, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MovieList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reviewsMovielistCreate(data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ReviewsApi.reviewsMovielistCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} id A UUID string identifying this movie list.
         * @param {MovieList} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reviewsMovielistCreate_1(id: string, data: MovieList, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MovieList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reviewsMovielistCreate_1(id, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ReviewsApi.reviewsMovielistCreate_1']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reviewsMovielistList(page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReviewsMovielistList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reviewsMovielistList(page, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ReviewsApi.reviewsMovielistList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} id A UUID string identifying this movie list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reviewsMovielistRead(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MovieList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reviewsMovielistRead(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ReviewsApi.reviewsMovielistRead']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {MovieReviewCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reviewsMoviereviewsCreate(data: MovieReviewCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MovieReviewCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reviewsMoviereviewsCreate(data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ReviewsApi.reviewsMoviereviewsCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} id A UUID string identifying this movie review.
         * @param {MovieReviewCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reviewsMoviereviewsCreate_2(id: string, data: MovieReviewCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MovieReviewCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reviewsMoviereviewsCreate_2(id, data, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ReviewsApi.reviewsMoviereviewsCreate_2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} id A UUID string identifying this movie review.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reviewsMoviereviewsDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reviewsMoviereviewsDelete(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ReviewsApi.reviewsMoviereviewsDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reviewsMoviereviewsList(page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReviewsMoviereviewsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reviewsMoviereviewsList(page, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ReviewsApi.reviewsMoviereviewsList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} id A UUID string identifying this movie review.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reviewsMoviereviewsRead(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MovieReviewDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reviewsMoviereviewsRead(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ReviewsApi.reviewsMoviereviewsRead']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ReviewsApi - factory interface
 * @export
 */
export const ReviewsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReviewsApiFp(configuration)
    return {
        /**
         * 
         * @param {MovieList} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsMovielistCreate(data: MovieList, options?: any): AxiosPromise<MovieList> {
            return localVarFp.reviewsMovielistCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A UUID string identifying this movie list.
         * @param {MovieList} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsMovielistCreate_1(id: string, data: MovieList, options?: any): AxiosPromise<MovieList> {
            return localVarFp.reviewsMovielistCreate_1(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsMovielistList(page?: number, options?: any): AxiosPromise<ReviewsMovielistList200Response> {
            return localVarFp.reviewsMovielistList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A UUID string identifying this movie list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsMovielistRead(id: string, options?: any): AxiosPromise<MovieList> {
            return localVarFp.reviewsMovielistRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MovieReviewCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsMoviereviewsCreate(data: MovieReviewCreate, options?: any): AxiosPromise<MovieReviewCreate> {
            return localVarFp.reviewsMoviereviewsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A UUID string identifying this movie review.
         * @param {MovieReviewCreate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsMoviereviewsCreate_2(id: string, data: MovieReviewCreate, options?: any): AxiosPromise<MovieReviewCreate> {
            return localVarFp.reviewsMoviereviewsCreate_2(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A UUID string identifying this movie review.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsMoviereviewsDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.reviewsMoviereviewsDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsMoviereviewsList(page?: number, options?: any): AxiosPromise<ReviewsMoviereviewsList200Response> {
            return localVarFp.reviewsMoviereviewsList(page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id A UUID string identifying this movie review.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reviewsMoviereviewsRead(id: string, options?: any): AxiosPromise<MovieReviewDetail> {
            return localVarFp.reviewsMoviereviewsRead(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReviewsApi - object-oriented interface
 * @export
 * @class ReviewsApi
 * @extends {BaseAPI}
 */
export class ReviewsApi extends BaseAPI {
    /**
     * 
     * @param {MovieList} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApi
     */
    public reviewsMovielistCreate(data: MovieList, options?: RawAxiosRequestConfig) {
        return ReviewsApiFp(this.configuration).reviewsMovielistCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A UUID string identifying this movie list.
     * @param {MovieList} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApi
     */
    public reviewsMovielistCreate_1(id: string, data: MovieList, options?: RawAxiosRequestConfig) {
        return ReviewsApiFp(this.configuration).reviewsMovielistCreate_1(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApi
     */
    public reviewsMovielistList(page?: number, options?: RawAxiosRequestConfig) {
        return ReviewsApiFp(this.configuration).reviewsMovielistList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A UUID string identifying this movie list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApi
     */
    public reviewsMovielistRead(id: string, options?: RawAxiosRequestConfig) {
        return ReviewsApiFp(this.configuration).reviewsMovielistRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MovieReviewCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApi
     */
    public reviewsMoviereviewsCreate(data: MovieReviewCreate, options?: RawAxiosRequestConfig) {
        return ReviewsApiFp(this.configuration).reviewsMoviereviewsCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A UUID string identifying this movie review.
     * @param {MovieReviewCreate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApi
     */
    public reviewsMoviereviewsCreate_2(id: string, data: MovieReviewCreate, options?: RawAxiosRequestConfig) {
        return ReviewsApiFp(this.configuration).reviewsMoviereviewsCreate_2(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A UUID string identifying this movie review.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApi
     */
    public reviewsMoviereviewsDelete(id: string, options?: RawAxiosRequestConfig) {
        return ReviewsApiFp(this.configuration).reviewsMoviereviewsDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApi
     */
    public reviewsMoviereviewsList(page?: number, options?: RawAxiosRequestConfig) {
        return ReviewsApiFp(this.configuration).reviewsMoviereviewsList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id A UUID string identifying this movie review.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApi
     */
    public reviewsMoviereviewsRead(id: string, options?: RawAxiosRequestConfig) {
        return ReviewsApiFp(this.configuration).reviewsMoviereviewsRead(id, options).then((request) => request(this.axios, this.basePath));
    }
}



